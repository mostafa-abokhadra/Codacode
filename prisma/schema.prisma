generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
model portfolioProject {
  id Int @id @default(autoincrement())
  profile Profile @relation(fields: [profile_id], references: [id])
  profile_id Int
  title String?
  image String?
  description String?
  link String?
  repo String?
  role String?
  linkedInPost String?
}
model contactInfo {
  id Int @id @default(autoincrement())
  profile Profile @relation(fields: [profile_id], references: [id])
  profile_id Int @unique
  email String?
  number phoneNumber? @relation()
  facebook String?
  instagram String?
  linkedIn String?
  youtube String?
  website String?
  github String?
  twitter String?
}
model phoneNumber {
  id Int @id @default(autoincrement())
  contact contactInfo @relation(fields: [contact_id], references: [id])
  contact_id Int @unique

  number String?
  countryCode String?
}
model skill {
  id Int @id @default(autoincrement())
  profile Profile @relation(fields: [profile_id], references: [id])
  profile_id Int @unique

  name String?
}
model education {
  id Int @id @default(autoincrement())
  profile Profile @relation(fields: [profile_id], references: [id])
  profile_id Int 

  course String?
  degree String?
  organization String?
  startDate DateTime?
  endDate DateTime?
}
model Profile {
	id Int @id @default(autoincrement())
	image String?
  name String?
  tagline String?
  about String?
  education education[] @relation()
  skills skill[] @relation()
  projects portfolioProject[] @relation()
  contact contactInfo? @relation()
  contactId Int? @unique
  createdAT DateTime @default(now())
	updatedAt DateTime @default(now()) @updatedAt

  user User @relation(name: "UserProfile", fields: [userId], references: [id], onDelete: Cascade)
	userId Int @unique
}
model User {
	id Int @id @default(autoincrement())
	fullName String @db.VarChar(50)
	email String @unique @db.VarChar(255)
	password String 

  
  // GitHubCredential
  GitHub GitHubCredential? @relation("userGitHubCredential")

	profile Profile? @relation(name: "UserProfile")

	posts Post[] @relation(name: "UserPosts")
  pending Request[] // request i sent

  teams Team[] @relation("userTeams")
  messages message[] @relation("userMessages")

  //Projects owned by the user
  Projects  Project[] @relation(name: "userProjects")

  // Many-to-many relation with Project
  assignedProjects Project[] @relation("ProjectUsers")
}
model GitHubCredential {
  id Int @id @default(autoincrement())
  user User @relation("userGitHubCredential", fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique
  accessToken String?
  githubUsername String?
}

model Post {
	id Int @id @default(autoincrement())
  title String @db.VarChar(50)
	description String @db.VarChar(350)
	repo String
  languagePreferences String
  myRole String
	createdAt DateTime @default(now())
	updatedAt DateTime @default(now()) @updatedAt

	user User @relation(name: "UserPosts", fields: [user_id], references: [id], onDelete: Cascade)
	user_id Int

  project Project? @relation("projectPost", fields: [project_id], references: [id], onDelete: Cascade)
  project_id Int? @unique

  roles Role[] @relation()
}
model Role {
	id Int @id @default(autoincrement())
	position String
	needed Int
  applied Int @default(0)
  accepted Int @default(0)
  status roleStatus?

  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
	post_id Int

  requests Request[]
}
model Request {
  id Int @id @default(autoincrement())
  status requestStatus?

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id Int

  userApplied User @relation(fields: [userApplied_id], references: [id], onDelete: Cascade)
  userApplied_id Int

  show Boolean @default(true)
  showInPending Boolean @default(true)
  
  createdAT DateTime @default(now())
	UpdatedAt DateTime @default(now()) @updatedAt
}
model Team {
  id Int @id @default(autoincrement())

  members User[] @relation("userTeams")

  project Project? @relation("projectTeam", fields: [project_id], references: [id], onDelete: Cascade)
  project_id Int? @unique

  group Group? @relation("teamGroup")
 }
model Project {
  id Int @id @default(autoincrement())
  repo String
  status projectStatus?
  repoName String?
  owner User @relation("userProjects", fields: [owner_id], references: [id])
  owner_id Int

  post Post? @relation("projectPost")

  team Team? @relation("projectTeam")
  
  users User[] @relation("ProjectUsers")
}
model Group {
	id Int @id @default(autoincrement())
  
	team Team @relation("teamGroup", fields: [team_id], references: [id], onDelete: Cascade)
  team_id Int @unique
  messages message[] @relation("groupMessages")
}
model message {
	id Int @id @default(autoincrement())
  sendedAt DateTime @default(now())
  content String

	group Group @relation("groupMessages", fields: [group_id], references: [id], onDelete: Cascade)
	group_id Int
	
  user User @relation("userMessages", fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int
}

//  users behaviors data table for each page {
//  how many time each page get visitor
//  duration of which each user stays in each page
//  how many users signedUp
//  how many projects
//  returned visitor
//  unique visitor
//  }

enum gender {
  male
  female
}
enum roleStatus {
  completed
  available
}
enum requestStatus {
	waiting
	rejected
  accepted
}
enum projectStatus {
	waitingForTeam
  completed
}
